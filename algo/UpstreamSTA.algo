# "Fonction appelée lorsque une trame est recu par la machine et qu'elle doit etre traitée"

fonction (socket1 : socket, trame : liste d'octets, adresseIPsource : string) : Traitement
début
    entete <- trame[0] # "l'entete de la trame se trouve dans le premier octet" 
    donneUtile <- trame[1:]  # "le reste de la trame est donc de la donnée utile"
    binaire(entete)

    si entete[0:2] == 101 : binaire # "les trois premiers bits, à 101, de l'entete représentent une réponse d'horloge"
        setHorloge(donneUtile)
    fsi
fin


Algorithme
début
    # "Configuration de base de la station avec l'association avec L'AP"
    adresseIP <- "192.168.4.4" 
    adresseIPAP <- associationAP(ssid : "APfipy")
    socket1 <- creationsocket(Protocol : udp, Port : 6537, timeout : 0.05 seconde)

    # "réglage de l'horloge en réalisant une requète d'horloge"
    trame_envoyé <- octets("10000000")   # "100 représente le code pour une requète d'horloge"
    socket1.envoye(adresseIPAP, trame_envoyé)       # "envoye de la requete d'horloge"
    (trame_reçu, adresseIPsource) <- socket1.ecoute()      # "Fonction bloquante jusqu'a que le temps du timeout définit à la création de la socket soit terminé"
    Traitement(socket1, trame_reçu, adresseIPsource)


    # "intervalle de temps entre deux instant ou la Station doit se reveiller"
    intrevalleTempsEveillé <- 5 seconde

    # "liste de trames à envoyer à l'AP"
    donneeAEnvoye : liste


    tampon : horloge
    dateAChange : booleen

    # "l'instruction getHorloge-seconde()%intrevalleTempsEveillé permet de commencer la periode de service au bon moment"
    tantque Vrai faire

        # "les deux conditions 'si' suivante permettent de ne pas entrer de nouveaux dans une période de service "
        # "dans le cas ou la première s'est terminé tres rapidement et l'instruction"
        # "getHorloge-seconde()%intrevalleTempsEveillé est toujours vrai "
        si tampon != hetHorloge-seconde() % intrevalleTempsEveillé  #"fonction permettant de ne pas retourner dans la boucle dans la cas ou l'on serait dans la meme seconde au début et a la fin de la boucle"
            dateAChange <- Vrai
        fsi
        si getHorloge-seconde() % intrevalleTempsEveillé == 0 et dateAChange
            dateAChange <- Faux
            tampon <- getHorloge-seconde() % intrevalleTempsEveillé
            tantque Vrai faire
                    si taille(donneeAEnvoye) != 0
                        trame_envoyé <- octets("00000000") + octets(donneeAEnvoye.pop()) 
                        socket.send(adresseIPAP, trame_envoyé)
                    sinon
                        break          #"sort de la boucle tantque Vrai"
                    fsi
            ftantque
        fsi
    ftantque

fin



